name: Release

on:
  push:
    branches: ["master"]
  # scheduled: 
  workflow_dispatch:
    inputs:
      versions:
        required: true
        type: string
        description: 'Example: {"include": [{"params": {"sparkVersion": "3.0.3","scalaVersion": "2.12.10"}},{"params": {"sparkVersion": "3.1.3","scalaVersion": "2.12.10"}},{"params": { "sparkVersion": "3.2.4","scalaVersion": "2.12.15"}},{"params": {"sparkVersion": "3.3.4","scalaVersion": "2.12.15"}},{"params": {"sparkVersion": "3.4.2","scalaVersion": "2.12.17"}},{"params": {"sparkVersion": "3.5.0","scalaVersion": "2.12.18"}},{"params": {"sparkVersion": "3.2.4","scalaVersion": "2.13.5"}},{"params": {"sparkVersion": "3.3.4","scalaVersion": "2.13.8"}},{"params": {"sparkVersion": "3.4.2","scalaVersion": "2.13.8"}},{"params": {"sparkVersion": "3.5.0","scalaVersion": "2.13.8"}}]}'
        default: ''

env:
  PYTHON_VERSION: "3.8"

jobs:
  default-snapshoot:
    name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
    if: ${{  github.event_name == 'scheduled' ||  (github.ref == 'refs/heads/master' && github.event_name != 'workflow_dispatch')  }}
    # if: ${{ !github.event.repository.fork && (github.ref == 'refs/heads/master' || github.event_name == 'scheduled') }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - params: {"sparkVersion": "3.0.3", "scalaVersion": "2.12.10"}
          - params: {"sparkVersion": "3.1.3", "scalaVersion": "2.12.10"}
          - params: {"sparkVersion": "3.2.4", "scalaVersion": "2.12.15"}
          - params: {"sparkVersion": "3.3.4", "scalaVersion": "2.12.15"}
          - params: {"sparkVersion": "3.4.2", "scalaVersion": "2.12.17"}
          - params: {"sparkVersion": "3.5.0", "scalaVersion": "2.12.18"}
          - params: {"sparkVersion": "3.2.4", "scalaVersion": "2.13.5"}
          - params: {"sparkVersion": "3.3.4", "scalaVersion": "2.13.8"}
          - params: {"sparkVersion": "3.4.2", "scalaVersion": "2.13.8"}
          - params: {"sparkVersion": "3.5.0", "scalaVersion": "2.13.8"}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'corretto'
          cache: 'maven'
          cache-dependency-path: './pom.xml'

      - uses: actions/setup-python@v5 
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-
      
      - name: Cache Pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-whl-${{ env.PYTHON_VERSION }}-${{ matrix.params.sparkVersion }}

      - name: Import GPG key
        id: sign
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Check if this is a SNAPSHOT versions
        id: check-snapshoot
        run: |
          if ! grep -q "<version>.*-SNAPSHOT</version>" pom.xml
          then
            echo "Version in pom is not a SNAPSHOT version, cannot test all versions"
            exit 1
          fi

      - name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
        id: snapshoot
        run: |

          # required for GitHub CI
          pip3 install virtualenv
          mkdir -p ~/.ivy2

          ./set-version.sh ${{ matrix.params.sparkVersion }} ${{ matrix.params.scalaVersion }}
          mvn clean deploy -Dsign

          # For Scala version 2.12 build the python
          if [[ ${{ matrix.params.scalaVersion }}  == 2.12* ]]; then
              echo "Scala version starts with '2.12'"
              ./build-whl.sh
          fi

          # Test the release
          ./test-release.sh

  matrix-snapshoot:
    name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
    if: ${{ github.event_name == 'workflow_dispatch' }}
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(github.event.inputs.versions)}}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'corretto'
          cache: 'maven'
          cache-dependency-path: './pom.xml'

      - uses: actions/setup-python@v5 
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-
      
      - name: Cache Pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-whl-${{ env.PYTHON_VERSION }}-${{ matrix.params.sparkVersion }}

      - name: Import GPG key
        id: sign
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Check if this is a SNAPSHOT versions
        id: check-snapshoot
        run: |
          if ! grep -q "<version>.*-SNAPSHOT</version>" pom.xml
          then
            echo "Version in pom is not a SNAPSHOT version, cannot test all versions"
            exit 1
          fi

      - name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
        id: snapshoot
        run: |

          # required for GitHub CI
          pip3 install virtualenv
          mkdir -p ~/.ivy2

          ./set-version.sh ${{ matrix.params.sparkVersion }} ${{ matrix.params.scalaVersion }}
          mvn clean deploy -Dsign

          # For Scala version 2.12 build the python
          if [[ ${{ matrix.params.scalaVersion }}  == 2.12* ]]; then
              echo "Scala version starts with '2.12'"
              ./build-whl.sh
          fi

          # Test the release
          ./test-release.sh

  prepare-release:
    name: Prepare release
    runs-on: ubuntu-latest
    needs: [matrix-snapshoot]
    if: ${{ github.event_name == 'workflow_dispatch' }}
    permissions:
      contents: write # required to push to a branch
    continue-on-error: true
    outputs:
      releaseVersion: ${{ steps.updateVersions.outputs.releaseVersion }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check if this is a SNAPSHOT versions
        id: check-snapshoot
        run: |
          if ! grep -q "<version>.*-SNAPSHOT</version>" pom.xml
          then
            echo "Version in pom.xml is not a SNAPSHOT version, cannot test all versions"
            exit 1
          fi

      - name: Update versions
        id: updateVersions
        run: |

          # check for unreleased entry in CHANGELOG.md
          readarray -t changes < <(grep -A 100 "^## \[UNRELEASED\] - YYYY-MM-DD" CHANGELOG.md | grep -B 100 --max-count=1 -E "^## \[[0-9.]+\]" | grep "^-")
          if [ ${#changes[@]} -eq 0 ]
          then
            echo "Did not find any changes in CHANGELOG.md under '## [UNRELEASED] - YYYY-MM-DD'"
            exit 1
          fi

          # get latest and release version
          latest=$(grep --max-count=1 "<version>.*</version>" README.md | sed -E -e "s/\s*<[^>]+>//g" -e "s/-[0-9.]+//g")
          version=$(grep --max-count=1 "<version>.*</version>" pom.xml | sed -E -e "s/\s*<[^>]+>//g" -e "s/-SNAPSHOT//" -e "s/-[0-9.]+//g")

          # update change
          echo "Releasing ${#changes[@]} changes as version $version:"
          for (( i=0; i<${#changes[@]}; i++ )); do echo "${changes[$i]}" ; done
          sed -i "s/## \[UNRELEASED\] - YYYY-MM-DD/## [$version] - $(date +%Y-%m-%d)/" CHANGELOG.md
          sed -i -e "s/$latest-/$version-/g" -e "s/$latest\./$version./g" README.md PYSPARK-DEPS.md python/README.md
          ./set-version.sh $version

          # commit changes to local repo
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          echo "Committing release to local git"
          git add pom.xml python/setup.py CHANGELOG.md README.md python/README.md
          git commit -m "Releasing $version"
          git tag -a "v${version}" -m "Release v${version}"

          # updating master and pushing a tag for the release
          echo "Pushing release commit and tag to origin"
          git push origin master "v${version}"

          # share release version to next job
          echo "releaseVersion=v${version}" >> "$GITHUB_OUTPUT"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-release:
    name: Publish release
    runs-on: ubuntu-latest
    needs: [prepare-release]
    if: success()
    permissions:
      contents: write # required to push to a branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{needs.prepare-release.outputs.releaseVersion}}

      - name: Import GPG key
        id: sign
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Publish artifacts
        id: publish
        run: |

          # build and publish artifact
          ./set-version.sh ${{ matrix.params.sparkVersion }} ${{ matrix.params.scalaVersion }}
          mvn clean deploy -Dsign

          # For Scala version 2.12 build & release python
          if [[ ${{ matrix.params.scalaVersion }}  == 2.12* ]]; then
              echo "Scala version starts with '2.12'"
              ./build-whl.sh

              # upload to test PyPi
              pip install twine
              twine check python/dist/*
              python3 -m twine upload --repository testpypi python/dist/*

              # upload to PyPi
              python3 -m twine upload python/dist/*
          fi

      - name: Publish GitHub release
        uses: softprops/action-gh-release@v1
        if: steps.publish.outcome == 'success'
        id: githubRelease
        with:
          name: "Releasing ${{ steps.publish.outputs.RELEASE_TAG }}"
          body_path: CHANGELOG.md
          tag_name: ${{ steps.publish.outputs.RELEASE_TAG }}

      - name: Bump version for SNAPSHOT
        id: bumpVersion
        if: steps.githubRelease.outcome == 'success'
        run: |

          # define function to bump version
          function next_version {
            local version=$1
            local branch=$2
          
            patch=${version/*./}
            majmin=${version%.${patch}}
          
            if [[ $branch == "master" ]]
            then
              # minor version bump
              if [[ $version != *".0" ]]
              then
                echo "version is patch version, should be M.m.0: $version" >&2
                exit 1
              fi
              maj=${version/.*/}
              min=${majmin#${maj}.}
              next=${maj}.$((min+1)).0
              echo "$next"
            else
              # patch version bump
              next=${majmin}.$((patch+1))
              echo "$next"
            fi
          }
          
          # get release and next version
          version=$(grep --max-count=1 "<version>.*</version>" pom.xml | sed -E -e "s/\s*<[^>]+>//g")
          pkg_version="${version/-*/}"
          branch=$(git rev-parse --abbrev-ref HEAD)
          next_pkg_version="$(next_version "$pkg_version" "$branch")"
          
          # bump the version
          echo "Bump version to $next_pkg_version"
          ./set-version.sh $next_pkg_version-SNAPSHOT
          
          # commit changes to local repo
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

          echo "Committing release to local git"
          git commit -a -m "Post-release version bump to $next_pkg_version"
          
          # push version bump to origin
          echo "Pushing release commit to origin"
          git push origin "master"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}