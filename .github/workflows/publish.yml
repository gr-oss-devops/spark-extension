# name: Publish release

# on:
#   workflow_run:
#     workflows: [Release]
#     types:
#       - completed

# env:
#   PYTHON_VERSION: "3.8"

# jobs:
#   publish-release:
#     if: ${{ github.event.workflow_run.conclusion == 'success' }}
#     name: Publish Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
#     runs-on: ubuntu-latest
#     continue-on-error: false
#     strategy:
#       matrix:
#         matrix: ${{fromJson(github.event.inputs.versions)}}

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-tags: true
#           fetch-depth: 0


#       - name: Publish release
#         id: publish
#         run: |

#           # checkout a latest tag and set release tag
#           echo "RELEASE_TAG=$(git describe --abbrev=0 --tags)" >> $GITHUB_OUTPUT
#           git checkout $(git describe --abbrev=0 --tags)
          
#           # build and publish artifact
#           ./set-version.sh ${{ matrix.params.sparkVersion }} ${{ matrix.params.scalaVersion }}
#           mvn clean deploy -Dsign
#           mvn nexus-staging:release
#           ./build-whl.sh

#           # upload to test PyPi
#           pip install twine
#           twine check python/dist/*
#           python3 -m twine upload --repository testpypi python/dist/*

#           # upload to PyPi
#           python3 -m twine upload python/dist/*

#       - name: Publish GitHub release
#         uses: softprops/action-gh-release@v1
#         with:
#           name: "Releasing ${{ steps.publish.outputs.RELEASE_TAG }}"
#           body_path: CHANGELOG.md
#           tag_name: ${{ steps.publish.outputs.RELEASE_TAG }}

#   bump-version:
#     name: Bump version
#     runs-on: ubuntu-latest
#     needs: [publish-release]
#     continue-on-error: false
#     permissions:
#       contents: write # required to push to a branch

#     steps:
#       - name: Checkout code
#         uses: actions/checkout@v4
#         with:
#           fetch-tags: true
#           fetch-depth: 0

#       - name: Bump version for SNAPSHOT
#         run: |

#           # define function to bump version
#           function next_version {
#             local version=$1
#             local branch=$2
          
#             patch=${version/*./}
#             majmin=${version%.${patch}}
          
#             if [[ $branch == "master" ]]
#             then
#               # minor version bump
#               if [[ $version != *".0" ]]
#               then
#                 echo "version is patch version, should be M.m.0: $version" >&2
#                 exit 1
#               fi
#               maj=${version/.*/}
#               min=${majmin#${maj}.}
#               next=${maj}.$((min+1)).0
#               echo "$next"
#             else
#               # patch version bump
#               next=${majmin}.$((patch+1))
#               echo "$next"
#             fi
#           }
          
#           # get release and next version
#           version=$(grep --max-count=1 "<version>.*</version>" pom.xml | sed -E -e "s/\s*<[^>]+>//g")
#           pkg_version="${version/-*/}"
#           branch=$(git rev-parse --abbrev-ref HEAD)
#           next_pkg_version="$(next_version "$pkg_version" "$branch")"
          
#           # bump the version
#           echo "Bump version to $next_pkg_version"
#           ./set-version.sh $next_pkg_version-SNAPSHOT
          
#           # commit changes to local repo
#           git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
#           git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

#           echo "Committing release to local git"
#           git commit -a -m "Post-release version bump to $next_pkg_version"
          
#           # push version bump to origin
#           echo "Pushing release commit to origin"
#           git push origin "master"
#         env:
#           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
