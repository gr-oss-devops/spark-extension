name: Publish release

on:
  workflow_dispatch:
  push:
    branches: ['master','oss-32-release']

env:
  PYTHON_VERSION: "3.10"

jobs:
  release-snapshoot:
    name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
    runs-on: ubuntu-latest
    continue-on-error: true
    strategy:
      matrix:
        include:
          - params: { sparkVersion: "3.0.3", scalaVersion: "2.12.10" }
          - params: { sparkVersion: "3.1.3", scalaVersion: "2.12.10" }
          - params: { sparkVersion: "3.2.4", scalaVersion: "2.12.15" }
          - params: { sparkVersion: "3.2.4", scalaVersion: "2.13.5" }
          - params: { sparkVersion: "3.3.4", scalaVersion: "2.12.15" }
          - params: { sparkVersion: "3.3.4", scalaVersion: "2.13.8" }
          - params: { sparkVersion: "3.4.2", scalaVersion: "2.12.17" }
          - params: { sparkVersion: "3.4.2", scalaVersion: "2.13.8" }
          - params: { sparkVersion: "3.5.0", scalaVersion: "2.12.18" }
          - params: { sparkVersion: "3.5.0", scalaVersion: "2.13.8" }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up JDK 8
        uses: actions/setup-java@v4
        with:
          java-version: '8'
          distribution: 'corretto'
          cache: 'maven'
          cache-dependency-path: './pom.xml'

      - uses: actions/setup-python@v5 
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache Maven packages
        id: cache-maven
        uses: actions/cache@v4
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-${{ hashFiles('pom.xml') }}
          restore-keys: ${{ runner.os }}-mvn-build-${{ matrix.params.sparkVersion }}-${{ matrix.params.scalaVersion }}-
      
      - name: Cache Pip packages
        id: cache-pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-whl-${{ env.PYTHON_VERSION }}-${{ matrix.params.sparkVersion }}

      - name: Import GPG key
        id: sign
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Check if this is a SNAPSHOT versions
        id: check-snapshoot
        run: |
          if ! grep -q "<version>.*-SNAPSHOT</version>" pom.xml
          then
            echo "Version in pom is not a SNAPSHOT version, cannot test all versions"
            exit 1
          fi

      - name: Release snapshoot Spark:${{ matrix.params.sparkVersion }} - Scala:${{ matrix.params.scalaVersion }}
        id: snapshoot
        run: |
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"

          # mkdir -p ~/.ivy2
          # pip3 install virtualenv
          # wget https://mirrors.estointernet.in/apache/maven/maven-3/3.6.3/binaries/apache-maven-3.6.3-bin.tar.gz
          # tar -xvf apache-maven-3.6.3-bin.tar.gz
          # mv apache-maven-3.6.3 /opt/
          # M2_HOME='/opt/apache-maven-3.6.3'
          # PATH="$M2_HOME/bin:$PATH"
          # export PATH
          # mvn --version

          pip3 install virtualenv
          mkdir -p ~/.ivy2

          ./set-version.sh ${{ matrix.params.sparkVersion }} ${{ matrix.params.scalaVersion }}
          mvn clean deploy -Dsign
          ./build-whl.sh
          ./test-release.sh

  update-version:
    runs-on: ubuntu-latest
    needs: [release-snapshoot]
    permissions:
      contents: write # required to push to a branch

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Import GPG key
        id: sign
        uses: crazy-max/ghaction-import-gpg@v6
        with:
          gpg_private_key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Update versions
        id: update-versions
        run: |

          # check for unreleased entry in CHANGELOG.md
          readarray -t changes < <(grep -A 100 "^## \[UNRELEASED\] - YYYY-MM-DD" CHANGELOG.md | grep -B 100 --max-count=1 -E "^## \[[0-9.]+\]" | grep "^-")
          if [ ${#changes[@]} -eq 0 ]
          then
            echo "Did not find any changes in CHANGELOG.md under '## [UNRELEASED] - YYYY-MM-DD'"
            exit 1
          fi

          # get latest and release version
          latest=$(grep --max-count=1 "<version>.*</version>" README.md | sed -E -e "s/\s*<[^>]+>//g" -e "s/-[0-9.]+//g")
          version=$(grep --max-count=1 "<version>.*</version>" pom.xml | sed -E -e "s/\s*<[^>]+>//g" -e "s/-SNAPSHOT//" -e "s/-[0-9.]+//g")

          # update change
          echo "Releasing ${#changes[@]} changes as version $version:"
          for (( i=0; i<${#changes[@]}; i++ )); do echo "${changes[$i]}" ; done
          sed -i "s/## \[UNRELEASED\] - YYYY-MM-DD/## [$version] - $(date +%Y-%m-%d)/" CHANGELOG.md
          sed -i -e "s/$latest-/$version-/g" -e "s/$latest\./$version./g" README.md PYSPARK-DEPS.md python/README.md
          ./set-version.sh $version

          # commit changes to local repo
          git config --global user.name "$(git --no-pager log --format=format:'%an' -n 1)"
          git config --global user.email "$(git --no-pager log --format=format:'%ae' -n 1)"
          echo "Committing release to local git"
          git add pom.xml python/setup.py CHANGELOG.md README.md python/README.md
          git commit -m "Releasing $version"
          git tag -a "v${version}" -m "Release v${version}"

          echo "Pushing release commit and tag to origin"
          git push origin oss-32-release "v${version}"

          # set output for release tag
          echo "v${version}" > releaseTagVersion.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Publish artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-tag-version
          path: releaseTagVersion.txt
